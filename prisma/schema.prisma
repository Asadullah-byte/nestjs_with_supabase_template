generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                  String          @id(map: "users_pkey") @db.Uuid
  email                               String          @unique(map: "users_email_key")
  createdAt                           DateTime        @default(now()) @map("created_at")
  updatedAt                           DateTime        @default(now()) @updatedAt @map("updated_at")
  role_id                             String          @default(dbgenerated("get_default_user_role_id()")) @db.Uuid
  full_name                           String
  is_deactivated                      Boolean         @default(false)
  profile_pic                         String?
  chat                                Chat[]
  chat_chat_receiver_idTouser         Chat[]          @relation("chat_receiver_idTouser")
  group_members                       group_members[]
  images                              images[]
  messages_messages_reciever_idTouser Message[]       @relation("messages_reciever_idTouser")
  messages_messages_sender_idTouser   Message[]       @relation("messages_sender_idTouser")
  roles                               roles           @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@map("user")
}

model Message {
  id                              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                      DateTime @default(now()) @db.Timestamptz(6)
  content                         String
  receiver_id                     String?  @db.Uuid
  sender_id                       String   @db.Uuid
  chat_id                         String   @db.Uuid
  is_seen                         Boolean
  updated_at                      DateTime @default(now()) @db.Timestamptz(6)
  chat                            Chat     @relation(fields: [chat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_messages_reciever_idTouser User?    @relation("messages_reciever_idTouser", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_messages_sender_idTouser   User     @relation("messages_sender_idTouser", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("messages")
}

model Chat {
  id                          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                  DateTime        @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime        @default(now()) @db.Timestamptz(6)
  created_by                  String          @db.Uuid
  name                        String?
  receiver_id                 String?         @db.Uuid
  members                     String[]
  user                        User            @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_chat_receiver_idTouser User?           @relation("chat_receiver_idTouser", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  group_members               group_members[]
  messages                    Message[]

  @@map("chat")
}

model group_members {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  chat_id    String   @db.Uuid
  user_id    String   @db.Uuid
  chat       Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade, map: "group_members_chat_id_fkey")
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "group_members_user_id_fkey")
}

model roles {
  id   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role user_role @unique @default(user)
  user User[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model images {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  image_id   String   @unique
  user_id    String   @db.Uuid
  image_url  String?
  file_path  String?
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum user_role {
  admin
  user
}
